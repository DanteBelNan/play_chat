name: Build & Push Backend Image to ECR

on:
  push:
    branches:
      - main
  # Esto permite la ejecución manual desde la pestaña 'Actions'
  workflow_dispatch:

env:
  # Estas variables serán SOBREESCRITAS por Terraform
  ECR_REPOSITORY: 'PLACEHOLDER_REPO_NAME' # Placeholder que será reemplazado
  AWS_REGION: 'us-east-2'                 # Asegúrate de que coincida con tu región de Terraform

jobs:
  build_and_push:
    name: Docker Build, Tag, and Push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Estas credenciales deben estar configuradas como Secrets en el Repositorio de GitHub
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Usamos el SHA del commit como tag
        run: |
          # 1. Compila la imagen (usando el Dockerfile dentro de backend/)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/Dockerfile.node ./backend

          # 2. Etiqueta como 'latest'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # 3. Empuja al ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest