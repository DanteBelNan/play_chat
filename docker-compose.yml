version: '3.8'

services:

  # 1. PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      # Port mapping: ${DB_PORT} (host) : 5432 (container)
      - "${DB_PORT}:5432"
    volumes:
      # Data persistence volume
      - postgres_data:/var/lib/postgresql/data

  # 2. Backend Service (Node.js/Express/Socket.IO)
  node:
    build: 
      context: ./backend 
      dockerfile: ../docker/Dockerfile.node 
    container_name: node_backend # Renamed to be more explicit
    restart: always
    # NOT exposed to the host, only accessible via the Docker network
    depends_on:
      - db 
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${APP_PORT} # Internal port 3000
      SECRET_KEY: ${SECRET_KEY}
      # Database connection URL (using 'db' as hostname)
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    volumes:
      # Mounts the local 'backend' folder to the container's WORKDIR
      - ./backend:/app 
      - /app/node_modules # Prevents overwriting node_modules from the host

  # 3. Nginx Service (Reverse Proxy and Frontend Server)
  nginx:
    build: 
      context: ./frontend
      dockerfile: ../docker/Dockerfile.nginx
    container_name: nginx_proxy # Renamed to be more explicit
    restart: always
    ports:
      # Exposed port: Host port 8080 maps to container port 80
      - "8080:80" 
    depends_on:
      # Depends on the backend for API/Socket routing
      - node
      
  # 4. CLI Service (For executing Node scripts/commands)
  cli:
    build: 
      context: ./backend 
      dockerfile: ../docker/Dockerfile.node
    container_name: node
    depends_on:
      - db
      - node
    environment:
      # Ensure all necessary DB variables are passed
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./backend:/app
      - /app/node_modules
    # Overrides the default CMD to keep the container running indefinitely
    entrypoint: sh 
    command: -c "tail -f /dev/null"

volumes:
  # Volume for PostgreSQL data persistence
  postgres_data: